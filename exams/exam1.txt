Exam #1 score (langley1): 6/6

=== Grade Feedback for Problem "exam1_createSmallClass_cube" ===
[1/1]: Test: default constructor
[1/1]: Test: one parameter constructor
[1/1]: Test: use of type double
=====
[3/3]

--- stdout ---
g++ -g -O0 -Wall -Wextra main.cpp cube.cpp -o cube-tester
Testing default constructor...
+ PASS : (new cube())->getVolume == 1

Testing one parameter constructor...
+ PASS : (new cube(2))->getVolume == 8

Testing use of type double...
+ PASS : (new cube(2.5))->getVolume == 2.5 * 2.5 * 2.5



--- stderr ---


--- submitted file: cube.cpp ---
#include "cube.h"

//
// The cube class must:
//
// - Store a variable d (stored as a double), which represents the length of
//   one edge of the cube.
//
// - Have a default constructor that sets the length of the edge of the cube
//   to 1.0.
//
// - Have a second constructor that takes one parameter: the length of one
//   edge of the cube
//
// - Have a getVolume function that takes no parameters and returns the volume
//   of the cube (as a double):
//   - The volume of the cube can be calculated by: d * d * d
//


    
//default constructor
cube::cube()
{
    d = 1.0;
}
    
//param constructor
cube::cube(double length)
{
    d = length;
}
    
double cube::getVolume()
{
    double c = d * d * d;
    return c;
}


--- submitted file: cube.h ---
#ifndef _CUBE_H
#define _CUBE_H

//
// The cube class must:
//
// - Store a variable d (stored as a double), which represents the length of
//   one edge of the cube.
//
// - Have a default constructor that sets the length of the edge of the cube
//   to 1.0.
//
// - Have a second constructor that takes one parameter: the length of one
//   edge of the cube
//
// - Have a getVolume function that takes no parameters and returns the volume
//   of the cube (as a double):
//   - The volume of the cube can be calculated by: d * d * d
//

class cube{
    public:
        double d;
        cube();
        cube(double length);
        double getVolume();

};
#endif


=== Grade Feedback for Problem "exam1_mp1-like_illiniBlue" ===
[1/1]: Test: in_1.png
[1/1]: Test: in_2.png
[1/1]: Test: in_3.png
=====
[3/3]

--- stdout ---
g++ -std=c++1y -c -g -O0 -Wall -Wextra -pedantic main.cpp
g++ -std=c++1y -c -g -O0 -Wall -Wextra -pedantic png.cpp
g++ -std=c++1y -c -g -O0 -Wall -Wextra -pedantic rgbapixel.cpp
g++ main.o png.o rgbapixel.o -std=c++1y -lpng -lpthread -o main


--- stderr ---


--- submitted file: main.cpp ---
#include <algorithm>
#include <iostream>

#include "rgbapixel.h"
#include "png.h"

using namespace std;

PNG transform_illini_blue(PNG original) {
	//
	// To "Illini Blue" an image, you must:
	// - Set the red and green components of every pixel to 0.
	// - The value of the blue components in each pixel must not be changed.
	//
	int width = original.width();
	int height = original.height();
 	for (int i = 0; i < width; i++){
		for (int j = 0; j < height; j++){
			(original)(i, j)->red = 0;
			(original)(i, j)->green = 0;
		}	
	}
        return original;

}

int main() {
	PNG image("in.png");
	image = transform_illini_blue(image);
	image.writeToFile("out.png");
	return 0;
}


